#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Finals_Landlord_
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Rent")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJobOrder(JobOrder instance);
    partial void UpdateJobOrder(JobOrder instance);
    partial void DeleteJobOrder(JobOrder instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertTenant(Tenant instance);
    partial void UpdateTenant(Tenant instance);
    partial void DeleteTenant(Tenant instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Finals_Landlord_.Properties.Settings.Default.RentConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<JobOrder> JobOrders
		{
			get
			{
				return this.GetTable<JobOrder>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<Tenant> Tenants
		{
			get
			{
				return this.GetTable<Tenant>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EmployeeStatus")]
		public int EmployeeStatus([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FN", DbType="NVarChar(50)")] string fN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LN", DbType="NVarChar(50)")] string lN)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), status, fN, lN);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NewFloor_Studio")]
		public int NewFloor_Studio([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UnitName", DbType="NVarChar(50)")] string unitName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Floor", DbType="NVarChar(50)")] string floor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), unitName, floor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NewFloor_2Bedroom")]
		public int NewFloor_2Bedroom([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UnitName", DbType="NVarChar(50)")] string unitName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Floor", DbType="NVarChar(50)")] string floor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), unitName, floor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NewFloor_Penthouse")]
		public int NewFloor_Penthouse([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UnitName", DbType="NVarChar(50)")] string unitName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Floor", DbType="NVarChar(50)")] string floor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), unitName, floor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TenantRegister")]
		public int TenantRegister([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Nationality", DbType="NVarChar(50)")] string nationality, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ContactNo", DbType="NChar(15)")] string contactNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Identification", DbType="NVarChar(50)")] string identification, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UnitID", DbType="Int")] System.Nullable<int> unitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firstName, lastName, nationality, contactNo, identification, unitID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Employee_Register")]
		public int Employee_Register([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Job", DbType="NChar(20)")] string job)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firstName, lastName, job);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.JobOrders_ADD")]
		public int JobOrders_ADD([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Desc", DbType="NVarChar(MAX)")] string desc, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmployeeID", DbType="Int")] System.Nullable<int> employeeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit", DbType="Int")] System.Nullable<int> unit, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tenant", DbType="Int")] System.Nullable<int> tenant, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Payment", DbType="Money")] System.Nullable<decimal> payment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), desc, employeeID, unit, tenant, payment);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.JobOrder_Update")]
		public int JobOrder_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmployeeID", DbType="Int")] System.Nullable<int> employeeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), employeeID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Billing")]
		public int Billing([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TenantID", DbType="Int")] System.Nullable<int> tenantID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BS", DbType="Date")] System.Nullable<System.DateTime> bS, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BE", DbType="Date")] System.Nullable<System.DateTime> bE, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Money")] System.Nullable<decimal> payment, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string desc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tenantID, bS, bE, payment, desc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.updateBilling")]
		public int updateBilling([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TenantID", DbType="Int")] System.Nullable<int> tenantID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BillID", DbType="Int")] System.Nullable<int> billID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tenantID, billID);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobOrder")]
	public partial class JobOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobOrderID;
		
		private string _JobOrder_Desc;
		
		private int _EmployeeID;
		
		private int _UnitID;
		
		private int _TenantID;
		
		private decimal _Payment;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Unit> _Unit;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobOrderIDChanging(int value);
    partial void OnJobOrderIDChanged();
    partial void OnJobOrder_DescChanging(string value);
    partial void OnJobOrder_DescChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnTenantIDChanging(int value);
    partial void OnTenantIDChanged();
    partial void OnPaymentChanging(decimal value);
    partial void OnPaymentChanged();
    #endregion
		
		public JobOrder()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Unit = default(EntityRef<Unit>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobOrderID
		{
			get
			{
				return this._JobOrderID;
			}
			set
			{
				if ((this._JobOrderID != value))
				{
					this.OnJobOrderIDChanging(value);
					this.SendPropertyChanging();
					this._JobOrderID = value;
					this.SendPropertyChanged("JobOrderID");
					this.OnJobOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobOrder_Desc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JobOrder_Desc
		{
			get
			{
				return this._JobOrder_Desc;
			}
			set
			{
				if ((this._JobOrder_Desc != value))
				{
					this.OnJobOrder_DescChanging(value);
					this.SendPropertyChanging();
					this._JobOrder_Desc = value;
					this.SendPropertyChanged("JobOrder_Desc");
					this.OnJobOrder_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantID", DbType="Int NOT NULL")]
		public int TenantID
		{
			get
			{
				return this._TenantID;
			}
			set
			{
				if ((this._TenantID != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIDChanging(value);
					this.SendPropertyChanging();
					this._TenantID = value;
					this.SendPropertyChanged("TenantID");
					this.OnTenantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Money NOT NULL")]
		public decimal Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_JobOrder", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.JobOrders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.JobOrders.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_JobOrder", Storage="_Unit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.JobOrders.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.JobOrders.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_JobOrder", Storage="_Tenant", ThisKey="TenantID", OtherKey="TenantID", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.JobOrders.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.JobOrders.Add(this);
						this._TenantID = value.TenantID;
					}
					else
					{
						this._TenantID = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Employee_FirstName;
		
		private string _Employee_LastName;
		
		private string _Job;
		
		private string _Status;
		
		private EntitySet<JobOrder> _JobOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployee_FirstNameChanging(string value);
    partial void OnEmployee_FirstNameChanged();
    partial void OnEmployee_LastNameChanging(string value);
    partial void OnEmployee_LastNameChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Employee()
		{
			this._JobOrders = new EntitySet<JobOrder>(new Action<JobOrder>(this.attach_JobOrders), new Action<JobOrder>(this.detach_JobOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Employee_FirstName
		{
			get
			{
				return this._Employee_FirstName;
			}
			set
			{
				if ((this._Employee_FirstName != value))
				{
					this.OnEmployee_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Employee_FirstName = value;
					this.SendPropertyChanged("Employee_FirstName");
					this.OnEmployee_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Employee_LastName
		{
			get
			{
				return this._Employee_LastName;
			}
			set
			{
				if ((this._Employee_LastName != value))
				{
					this.OnEmployee_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Employee_LastName = value;
					this.SendPropertyChanged("Employee_LastName");
					this.OnEmployee_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_JobOrder", Storage="_JobOrders", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<JobOrder> JobOrders
		{
			get
			{
				return this._JobOrders;
			}
			set
			{
				this._JobOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Units")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitID;
		
		private string _UnitNo;
		
		private string _UnitSize;
		
		private string _UnitFloor;
		
		private int _UnitStatus;
		
		private EntitySet<JobOrder> _JobOrders;
		
		private EntitySet<Tenant> _Tenants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnUnitNoChanging(string value);
    partial void OnUnitNoChanged();
    partial void OnUnitSizeChanging(string value);
    partial void OnUnitSizeChanged();
    partial void OnUnitFloorChanging(string value);
    partial void OnUnitFloorChanged();
    partial void OnUnitStatusChanging(int value);
    partial void OnUnitStatusChanged();
    #endregion
		
		public Unit()
		{
			this._JobOrders = new EntitySet<JobOrder>(new Action<JobOrder>(this.attach_JobOrders), new Action<JobOrder>(this.detach_JobOrders));
			this._Tenants = new EntitySet<Tenant>(new Action<Tenant>(this.attach_Tenants), new Action<Tenant>(this.detach_Tenants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitNo
		{
			get
			{
				return this._UnitNo;
			}
			set
			{
				if ((this._UnitNo != value))
				{
					this.OnUnitNoChanging(value);
					this.SendPropertyChanging();
					this._UnitNo = value;
					this.SendPropertyChanged("UnitNo");
					this.OnUnitNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitSize", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitSize
		{
			get
			{
				return this._UnitSize;
			}
			set
			{
				if ((this._UnitSize != value))
				{
					this.OnUnitSizeChanging(value);
					this.SendPropertyChanging();
					this._UnitSize = value;
					this.SendPropertyChanged("UnitSize");
					this.OnUnitSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitFloor", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string UnitFloor
		{
			get
			{
				return this._UnitFloor;
			}
			set
			{
				if ((this._UnitFloor != value))
				{
					this.OnUnitFloorChanging(value);
					this.SendPropertyChanging();
					this._UnitFloor = value;
					this.SendPropertyChanged("UnitFloor");
					this.OnUnitFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitStatus", DbType="Int NOT NULL")]
		public int UnitStatus
		{
			get
			{
				return this._UnitStatus;
			}
			set
			{
				if ((this._UnitStatus != value))
				{
					this.OnUnitStatusChanging(value);
					this.SendPropertyChanging();
					this._UnitStatus = value;
					this.SendPropertyChanged("UnitStatus");
					this.OnUnitStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_JobOrder", Storage="_JobOrders", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<JobOrder> JobOrders
		{
			get
			{
				return this._JobOrders;
			}
			set
			{
				this._JobOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Tenant", Storage="_Tenants", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<Tenant> Tenants
		{
			get
			{
				return this._Tenants;
			}
			set
			{
				this._Tenants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
		
		private void attach_Tenants(Tenant entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Tenants(Tenant entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tenants")]
	public partial class Tenant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantID;
		
		private string _Tenant_FirstName;
		
		private string _Tenant_LastName;
		
		private string _Nationality;
		
		private string _Contact_Number;
		
		private string _Identification;
		
		private int _UnitID;
		
		private EntitySet<JobOrder> _JobOrders;
		
		private EntitySet<Bill> _Bills;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIDChanging(int value);
    partial void OnTenantIDChanged();
    partial void OnTenant_FirstNameChanging(string value);
    partial void OnTenant_FirstNameChanged();
    partial void OnTenant_LastNameChanging(string value);
    partial void OnTenant_LastNameChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnContact_NumberChanging(string value);
    partial void OnContact_NumberChanged();
    partial void OnIdentificationChanging(string value);
    partial void OnIdentificationChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    #endregion
		
		public Tenant()
		{
			this._JobOrders = new EntitySet<JobOrder>(new Action<JobOrder>(this.attach_JobOrders), new Action<JobOrder>(this.detach_JobOrders));
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantID
		{
			get
			{
				return this._TenantID;
			}
			set
			{
				if ((this._TenantID != value))
				{
					this.OnTenantIDChanging(value);
					this.SendPropertyChanging();
					this._TenantID = value;
					this.SendPropertyChanged("TenantID");
					this.OnTenantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tenant_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tenant_FirstName
		{
			get
			{
				return this._Tenant_FirstName;
			}
			set
			{
				if ((this._Tenant_FirstName != value))
				{
					this.OnTenant_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Tenant_FirstName = value;
					this.SendPropertyChanged("Tenant_FirstName");
					this.OnTenant_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tenant_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tenant_LastName
		{
			get
			{
				return this._Tenant_LastName;
			}
			set
			{
				if ((this._Tenant_LastName != value))
				{
					this.OnTenant_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Tenant_LastName = value;
					this.SendPropertyChanged("Tenant_LastName");
					this.OnTenant_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact_Number", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string Contact_Number
		{
			get
			{
				return this._Contact_Number;
			}
			set
			{
				if ((this._Contact_Number != value))
				{
					this.OnContact_NumberChanging(value);
					this.SendPropertyChanging();
					this._Contact_Number = value;
					this.SendPropertyChanged("Contact_Number");
					this.OnContact_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identification", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Identification
		{
			get
			{
				return this._Identification;
			}
			set
			{
				if ((this._Identification != value))
				{
					this.OnIdentificationChanging(value);
					this.SendPropertyChanging();
					this._Identification = value;
					this.SendPropertyChanged("Identification");
					this.OnIdentificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_JobOrder", Storage="_JobOrders", ThisKey="TenantID", OtherKey="TenantID")]
		public EntitySet<JobOrder> JobOrders
		{
			get
			{
				return this._JobOrders;
			}
			set
			{
				this._JobOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Bill", Storage="_Bills", ThisKey="TenantID", OtherKey="TenantID")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Tenant", Storage="_Unit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Tenants.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Tenants.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bills")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Bill_ID;
		
		private int _TenantID;
		
		private System.DateTime _BillingPeriod_Beginning;
		
		private System.DateTime _BillingPeriod_End;
		
		private decimal _Payment_Required;
		
		private string _Bill_Desc;
		
		private int _Bill_status;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBill_IDChanging(int value);
    partial void OnBill_IDChanged();
    partial void OnTenantIDChanging(int value);
    partial void OnTenantIDChanged();
    partial void OnBillingPeriod_BeginningChanging(System.DateTime value);
    partial void OnBillingPeriod_BeginningChanged();
    partial void OnBillingPeriod_EndChanging(System.DateTime value);
    partial void OnBillingPeriod_EndChanged();
    partial void OnPayment_RequiredChanging(decimal value);
    partial void OnPayment_RequiredChanged();
    partial void OnBill_DescChanging(string value);
    partial void OnBill_DescChanged();
    partial void OnBill_statusChanging(int value);
    partial void OnBill_statusChanged();
    #endregion
		
		public Bill()
		{
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bill_ID
		{
			get
			{
				return this._Bill_ID;
			}
			set
			{
				if ((this._Bill_ID != value))
				{
					this.OnBill_IDChanging(value);
					this.SendPropertyChanging();
					this._Bill_ID = value;
					this.SendPropertyChanged("Bill_ID");
					this.OnBill_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantID", DbType="Int NOT NULL")]
		public int TenantID
		{
			get
			{
				return this._TenantID;
			}
			set
			{
				if ((this._TenantID != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIDChanging(value);
					this.SendPropertyChanging();
					this._TenantID = value;
					this.SendPropertyChanged("TenantID");
					this.OnTenantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingPeriod_Beginning", DbType="Date NOT NULL")]
		public System.DateTime BillingPeriod_Beginning
		{
			get
			{
				return this._BillingPeriod_Beginning;
			}
			set
			{
				if ((this._BillingPeriod_Beginning != value))
				{
					this.OnBillingPeriod_BeginningChanging(value);
					this.SendPropertyChanging();
					this._BillingPeriod_Beginning = value;
					this.SendPropertyChanged("BillingPeriod_Beginning");
					this.OnBillingPeriod_BeginningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingPeriod_End", DbType="Date NOT NULL")]
		public System.DateTime BillingPeriod_End
		{
			get
			{
				return this._BillingPeriod_End;
			}
			set
			{
				if ((this._BillingPeriod_End != value))
				{
					this.OnBillingPeriod_EndChanging(value);
					this.SendPropertyChanging();
					this._BillingPeriod_End = value;
					this.SendPropertyChanged("BillingPeriod_End");
					this.OnBillingPeriod_EndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Required", DbType="Money NOT NULL")]
		public decimal Payment_Required
		{
			get
			{
				return this._Payment_Required;
			}
			set
			{
				if ((this._Payment_Required != value))
				{
					this.OnPayment_RequiredChanging(value);
					this.SendPropertyChanging();
					this._Payment_Required = value;
					this.SendPropertyChanged("Payment_Required");
					this.OnPayment_RequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_Desc", DbType="NVarChar(MAX)")]
		public string Bill_Desc
		{
			get
			{
				return this._Bill_Desc;
			}
			set
			{
				if ((this._Bill_Desc != value))
				{
					this.OnBill_DescChanging(value);
					this.SendPropertyChanging();
					this._Bill_Desc = value;
					this.SendPropertyChanged("Bill_Desc");
					this.OnBill_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_status", DbType="Int NOT NULL")]
		public int Bill_status
		{
			get
			{
				return this._Bill_status;
			}
			set
			{
				if ((this._Bill_status != value))
				{
					this.OnBill_statusChanging(value);
					this.SendPropertyChanging();
					this._Bill_status = value;
					this.SendPropertyChanged("Bill_status");
					this.OnBill_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Bill", Storage="_Tenant", ThisKey="TenantID", OtherKey="TenantID", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._TenantID = value.TenantID;
					}
					else
					{
						this._TenantID = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
